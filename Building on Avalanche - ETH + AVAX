// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, Ownable {

    mapping(uint256 => uint256) public NFTPrices;
    mapping(address => uint256) public PlayerItems;

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        NFTPrices[1] = 800;
        NFTPrices[2] = 700;
        NFTPrices[3] = 500;
        NFTPrices[4] = 100;
    }

    function mintDGN(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function transferDGN(address _to, uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Transfer Failed: Insufficient balance.");
        approve(msg.sender, _amount);
        transferFrom(msg.sender, _to, _amount);
    }

    function showShopItems() external pure returns (string memory) {
        string memory saleOptions = "The items on sale: {1} RON (100) {2} AVE (60) {3} SLP (30) {4} BIT (10)";
        return saleOptions;
    }

    function buyItem(uint256 _item) public {
        require(NFTPrices[_item] > 0, "Item is not available.");
        require(_item <= 4, "Item is not available.");
        require(balanceOf(msg.sender) >= NFTPrices[_item], "Buy Failed: Insufficient balance.");
        
        PlayerItems[msg.sender] = _item;
        transfer(owner(), NFTPrices[_item]);
    }

    function redeemItem() public {
        uint256 item = PlayerItems[msg.sender];
        require(item > 0, "No item to redeem.");
        require(NFTPrices[item] > 0, "Item is not available.");
        transferFrom(owner(), msg.sender, NFTPrices[item]);
        delete PlayerItems[msg.sender];
    }

    function burnDGN(uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Burn Failed: Insufficient balance.");
        approve(msg.sender, _amount);
        _burn(msg.sender, _amount);
    }

    function getBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function decimals() override public pure returns (uint8) {
        return 0;
    }
}
